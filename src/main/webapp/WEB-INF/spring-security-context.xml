<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		  http://www.springframework.org/schema/beans/spring-beans.xsd
		  http://www.springframework.org/schema/security
		  http://www.springframework.org/schema/security/spring-security.xsd">

    <security:http />

    <!-- Example on how to customize login page. Notice that <security:http-basic />
         is missing so HTTP Basic authentication is disabled.
    <security:http>
        <security:intercept-url pattern="/my-login.jsp" access="permitAll" />
        <security:intercept-url pattern="/**" access="hasRole('USER')" />
        <security:form-login login-page="/my-login.jsp"
                             authentication-failure-url="/my-login.jsp?error" />
        <security:http-basic />
        <security:logout />
    </security:http>
    -->

    <security:authentication-manager>
        <security:authentication-provider>
            <security:user-service>
                <security:user name="user" password="password" authorities="ROLE_USER" />
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- An alternative to the above authentication-manager which
         in addition uses password encoder 'myPasswordEncoder'
         defined below.
    <security:authentication-manager>
        <security:authentication-provider>
            <security:password-encoder ref="myPasswordEncoder" />
            <security:user-service>
                <security:user name="user" password="$2a$10$lCXaUM1pDyFu4xsp5LJz/uXrNz3zJDu.cyiAV./g3fCS1sg3UfVFS" authorities="ROLE_USER" />
            </security:user-service>
        </security:authentication-provider>
    </security:authentication-manager>

    <bean id="myPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
    -->

    <!-- An alternative to the above authentication-manager which
         uses JDBC as the user repository. In addition 'myDataSource'
         must be defined using, for example, JNDI lookup,
         Apache Commons DBCP or something else.
    <security:authentication-manager>
        <security:authentication-provider>
            <security:jdbc-user-service data-source-ref="myDataSource" />
        </security:authentication-provider>
    </security:authentication-manager>

    <bean id="myDataSource" class="..." />
    -->
</beans>